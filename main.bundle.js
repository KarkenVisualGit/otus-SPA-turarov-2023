(()=>{"use strict";class t{routes=[];currentPath="";previousPath=null;constructor(t="hash"){this.mode=t,this.currentPath=this.getFragment(),window.addEventListener("hash"===this.mode?"hashchange":"popstate",(()=>this.handleRouteChange())),this.adjustLinksForGHPages()}adjustLinksForGHPages(){{const t="/otus-SPA-turarov-2023";document.querySelectorAll("a").forEach((e=>{e.href=t+e.pathname}))}}getFragment(){return"history"===this.mode?decodeURI(window.location.pathname+window.location.search):window.location.hash.slice(1)}async handleRouteChange(){this.previousPath=this.currentPath,this.currentPath=this.getFragment();const e={currentPath:this.currentPath,previousPath:this.previousPath,state:history.state};for(const o of this.routes)t.isMatch(o.match,this.currentPath)&&(o.onBeforeEnter&&await o.onBeforeEnter(e),o.onEnter&&await o.onEnter(e)),this.previousPath&&t.isMatch(o.match,this.previousPath)&&o.onLeave&&await o.onLeave(e)}static isMatch(t,e){return"function"==typeof t?t(e):t instanceof RegExp?t.test(e):t===e}on(t,e,o,r){const n=this.generateId(),a={id:n,match:t,onBeforeEnter:r,onEnter:e,onLeave:o};return this.routes.push(a),()=>{this.routes=this.routes.filter((t=>t.id!==n))}}createRender(t){return e=>{console.info(`${t} args=${JSON.stringify(e)}`);const o=document.getElementById("root");o&&(o.innerHTML=`<h2>${t}</h2>`)}}createLogger(){return t=>{console.info(`[leaving] args=${JSON.stringify(t)}`)}}someBeforeEnter(t){return async e=>{if(console.log(`Before entering, args: ${JSON.stringify(e)}`),e.currentPath===t){const e=document.getElementById("root");if(e){const o=document.createElement("div");o.innerHTML=`<h2>BeforeEnter: ${t}</h2>`,e.appendChild(o)}}}}generateId(){const t=()=>Math.floor(Math.random()*this.routes.length*1e3),e=t=>this.routes.some((e=>e.id===t));let o=t();for(;e(o);)o=t();return o}async navigate(t,e){"history"===this.mode?window.history.pushState(e,"",t):window.location.hash=t,await this.handleRouteChange()}}const e=new t("history"),o=e.on(/.*/,e.createRender("/.*"));e.on("/about",e.someBeforeEnter("/about"),e.createRender("/about"),e.createLogger()),e.on("/contacts",e.createRender("/contacts"),e.createLogger()),e.on("/login",e.createRender("/login"),e.createLogger()),e.on("/about/us",e.createRender("/about/us"),e.createLogger()),document.querySelectorAll("a").forEach((t=>{t.href="/otus-SPA-turarov-2023"+t.pathname})),document.body.addEventListener("click",(t=>{const r=t.target;if(r.matches("a")){t.preventDefault();const n=r.getAttribute("href");n&&(e.navigate(n),o())}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,