(()=>{"use strict";class t{routes=[];currentPath="";previousPath=null;constructor(t="hash"){this.mode=t,this.currentPath=this.getFragment(),window.addEventListener("hash"===this.mode?"hashchange":"popstate",(()=>this.handleRouteChange()))}getFragment(){return"history"===this.mode?decodeURI(window.location.pathname+window.location.search):window.location.hash.slice(1)}async handleRouteChange(){this.previousPath=this.currentPath,this.currentPath=this.getFragment();const e={currentPath:this.currentPath,previousPath:this.previousPath,state:history.state};for(const n of this.routes)t.isMatch(n.match,this.currentPath)&&(n.onBeforeEnter&&await n.onBeforeEnter(e),n.onEnter&&await n.onEnter(e)),this.previousPath&&t.isMatch(n.match,this.previousPath)&&n.onLeave&&await n.onLeave(e)}static isMatch(t,e){return"function"==typeof t?t(e):t instanceof RegExp?t.test(e):t===e}on(t,e,n,o){const r=this.generateId(),a={id:r,match:t,onBeforeEnter:o,onEnter:e,onLeave:n};return this.routes.push(a),()=>{this.routes=this.routes.filter((t=>t.id!==r))}}createRender(t){return e=>{console.info(`${t} args=${JSON.stringify(e)}`);const n=document.getElementById("root");n&&(n.innerHTML=`<h2>${t}</h2>`)}}createLogger(){return t=>{console.info(`[leaving] args=${JSON.stringify(t)}`)}}someBeforeEnter(t){return async e=>{if(console.log(`Before entering, args: ${JSON.stringify(e)}`),e.currentPath===t){const e=document.getElementById("root");if(e){const n=document.createElement("div");n.innerHTML=`<h2>BeforeEnter: ${t}</h2>`,e.appendChild(n)}}}}generateId(){const t=()=>Math.floor(Math.random()*this.routes.length*1e3),e=t=>this.routes.some((e=>e.id===t));let n=t();for(;e(n);)n=t();return n}async navigate(t,e){"history"===this.mode?window.history.pushState(e,"",t):window.location.hash=t,await this.handleRouteChange()}}const e=new t("history"),n=e.on(/.*/,e.createRender("/.*"));e.on("/about",e.someBeforeEnter("/about"),e.createRender("/about"),e.createLogger()),e.on("/contacts",e.createRender("/contacts"),e.createLogger()),e.on("/login",e.createRender("/login"),e.createLogger()),e.on("/about/us",e.createRender("/about/us"),e.createLogger()),document.querySelectorAll("a").forEach((t=>{t.href="/otus-SPA-turarov-2023"+t.pathname})),document.body.addEventListener("click",(t=>{const o=t.target;if(o.matches("a")){t.preventDefault();const r=o.getAttribute("href");r&&(e.navigate(r),n())}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,